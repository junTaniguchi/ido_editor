# DataLoom Studio - 完全技術仕様書

## 1. 概要
DataLoom Studio はブラウザ/Electron 双方で動作するローカルファーストなデータ分析ワークスペースです。Next.js 15 (App Router) と React 19 をベースに、Zustand・CodeMirror 6・File System Access API・isomorphic-git などを組み合わせて Markdown 編集、データプレビュー、単一/複数ファイル分析、Git 管理を統合しています。

### 1.1 主な特徴
- File System Access API によるローカルフォルダ連携と Zip/Tar.gz 圧縮/解凍
- CodeMirror 6 ベースのマルチタブエディタ（50+ 言語、矩形選択、折り畳み、差分表示）
- Markdown リアルタイムプレビュー + Mermaid GUI デザイナー + Word エクスポート
- CSV/TSV/JSON/YAML/Excel/Parquet/Notebook/PDF プレビューとエクスポート
- AlasQL/jStat を利用した SQL 実行・統計サマリー・Plotly/Chart.js チャート・関係グラフ
- Notebook (`.sqlnb.json`) で複数 SQL セルの実行履歴を保存/復元
- 複数ファイル分析で UNION/INTERSECTION/JOIN を構成し統合データに対してクエリ/チャート/Notebook を実行
- isomorphic-git による Git パネル（クローン/ステージ/コミット/ブランチ/履歴）
- Electron パッケージによるデスクトップ版（`studio.dataloom`）

### 1.2 技術スタック
| レイヤー | 技術 |
| ---- | ---- |
| UI | Next.js 15.4.5, React 19, TypeScript 5, Tailwind CSS v4 |
| エディタ | CodeMirror 6, @uiw/react-codemirror |
| 状態管理 | Zustand + persist + immer, React hooks |
| データ処理 | AlasQL, jStat, PapaParse, xlsx, Apache Arrow |
| 可視化 | Plotly.js, Chart.js, Mermaid v11, React Flow, React Force Graph |
| ファイル操作 | File System Access API, fflate, isomorphic-git |
| デスクトップ | Electron 31 + electron-builder |

## 2. アーキテクチャ
- App Router を用いたクライアントファースト構成。`src/app/page.tsx` は `'use client'` で MainLayout を直接描画。
- `src/store/editorStore.ts` にアプリ全体の状態を集約。persist ミドルウェアで IndexedDB (`editor-storage`) に保存。
- `src/lib/` にファイル I/O、データ整形、Git、Mermaid などのユーティリティを配置し、コンポーネントから直接呼び出し。
- heavy ライブラリ（Plotly, Mermaid, PDF.js 等）は `dynamic import` とチャンク分割で遅延ロード。

### 2.1 ディレクトリ構成
```
src/
├── app/               # layout.tsx / page.tsx / globals
├── components/
│   ├── analysis/      # 単一・複数ファイル分析 UI
│   ├── editor/        # CodeMirror ラッパー、Notebook
│   ├── explorer/      # File System Access エクスプローラ
│   ├── git/           # Git パネル
│   ├── layout/        # MainLayout, MainHeader など
│   ├── markdown/      # Markdown ツールバー/プレビュー
│   ├── mermaid/       # Mermaid プレビュー & GUI
│   ├── modals/        # 各種モーダル
│   ├── preview/       # CSV/JSON/Excel/PDF などのプレビュー
│   ├── search/        # VS Code 風検索パネル
│   ├── tabs/          # タブ管理
│   └── theme/         # ThemeController
├── lib/               # ユーティリティ（ファイル/分析/プレビュー/mermaid/git）
├── store/             # Zustand ストア
├── types/             # 型定義
└── electron/          # Electron main process
```

### 2.2 主要コンポーネント
- `MainLayout`: ヘッダー + エクスプローラ + タブ + プレビュー/分析領域の 3 ペイン構成。
- `MainHeader`: アプリ名「DataLoom Studio」、フォントサイズ調整、テーマ切替、検索、マルチファイル分析、テンポラリ作成、Git ボタン。
- `FileExplorer`: File System Access API を利用してツリー表示。Zip/Tar.gz の展開、圧縮、コンテキストメニュー。
- `TabBar` & `TabContentSwitcher`: ドラッグ&ドロップで並び替え、モード切替、タブごとのレンダリングを制御。
- `CodeEditor`: CodeMirror 拡張（言語自動判別、矩形選択、折り畳み、差分表示）。Notebook モードと連動。
- `MarkdownPreview` + `MermaidPreview/Designer`: Markdown レンダリング、目次、Mermaid の GUI 編集とエクスポート。
- `DataPreview`: CSV/TSV/JSON/YAML/Excel/Parquet/Notebook/PDF を統合レンダリング。列表示制御、フィルタ、ページネーション。
- `SingleFileAnalysis` / `MultiFileAnalysis`: SQL、統計、チャート、関係グラフ、Notebook を統合する分析 UI。
- `SearchPanel`: VS Code スタイルの検索/置換 UI（正規表現/単語一致/include/exclude）。
- `GitPanel`: isomorphic-git のラッパー。ステージ、コミット、ブランチ、履歴、クローン。

## 3. ユーティリティ API 概要
### 3.1 `fileSystemUtils.ts`
- `readDirectoryContents`：ディレクトリを再帰的に走査して `FileTreeItem` を生成。
- `createNewFile/createNewDirectory/rename/delete`：File System Access API を通じた CRUD。
- `extractZipArchive/extractTarGzArchive`：Zip/Tar.gz の展開。サブディレクトリを生成して配置。
- `compressToZip/compressToTarGz`：選択ファイルを Uint8Array のアーカイブに圧縮。
- `searchInDirectory/replaceInFile`：正規表現対応の全文検索と置換。
- `readExcelFileContent`：Excel を ArrayBuffer で読み込み、プレビュー/分析に委譲。

### 3.2 `dataPreviewUtils.ts`
- `detectFileType`：拡張子と内容からファイル種別を推定。
- `parseCsvLike`：CSV/TSV の共通パーサ。
- `parseJson/parseYaml`：エラーハンドリング付きパース。
- `loadExcelFromArrayBuffer`：シート一覧と範囲指定に対応。
- `loadNotebookFromFile`：`.ipynb` のセルを正規化してプレビュー用に変換。
- `readPdfFirstPage`：PDF.js 用データを準備。
- `preparePreviewData`：ファイルハンドルからプレビュー用データ構造を生成。

### 3.3 `dataAnalysisUtils.ts`
- `executeQuery`：AlasQL を実行（ネストアクセスに対応）。
- `calculateStatistics`：平均/分散/中央値/四分位/欠損数などを算出。
- `prepareChartData`：棒・折れ線・散布・バブル・回帰・ヒストグラム・ガント用データを生成。
- `calculateRegressionLine`：線形/指数/対数/二次回帰を求め、Plotly/Chart.js に渡す。
- `combineMultipleFiles`：UNION/INTERSECTION/JOIN 設定を適用した統合データを作成。
- `executeMultiFileQueryAnalysis`：複数ファイルモードでクエリ→統計→チャートの結果をまとめて返す。
- `convertDataToFormat` / `downloadData`：CSV/TSV/JSON/YAML/Excel/Parquet(テキスト) へのエクスポート。

### 3.4 その他
- `mermaid/*`: Mermaid の初期化、描画、エクスポート。
- `git/fileSystemAccessFs.ts`: isomorphic-git 用の File System Access ラッパー。
- `editorUtils.ts`: CodeMirror 拡張セットの生成、言語判定、差分ハイライト。
- `tocUtils.ts`: Markdown 見出しの抽出。

## 4. 機能仕様
### 4.1 ファイル操作
- フォルダ選択 → エクスプローラにキャッシュ。Zustand にハンドルを保持。
- 新規作成/リネーム/削除は File System Access API で即時反映。
- Zip/Tar.gz 展開は `fflate` を使用。ディレクトリを保持したまま書き込み。
- 複数選択したアイテムを Zip/Tar.gz に圧縮しダウンロード。

### 4.2 エディタ
- CodeMirror 6 Extensions: `lineNumbers`, `foldGutter`, `indentOnInput`, `autocompletion`, `searchKeymap`, `rectangularSelection` など。
- タブごとにフォントサイズ・テーマを共有（ヘッダーのボタンで変更）。
- Notebook モード: SQL セルを追加/削除/並べ替え。`RUN ALL` ボタンで順次実行。セルごとにテーブル/チャート表示を切替。
- Markdown ツールバー: 太字/見出し/テーブル/コードブロックなど挿入。Mermaid デザイナー起動ボタン。

### 4.3 プレビュー
- Markdown: `react-markdown` + `remark-gfm` + `rehype-highlight`。目次、折り畳み、外部リンク新規タブ、Word (.docx) エクスポート。
- Mermaid: コードブロックは自動描画。GUI は React Flow でノード/エッジ編集、整列、ズーム、SVG/PNG/クリップボード出力。
- データ: CSV/TSV/JSON/YAML/Excel/Parquet/Notebook/PDF/HTML に対応。列表示制御、フィルタ、ページネーション、Excel 範囲指定、JSON⇔テーブル変換。
- Notebook (.ipynb): セル種別ごとにスタイルを付与し、画像/HTML 出力をそのまま表示。
- PDF: PDF.js で 1 ページ目をキャンバス描画。ズーム・パン対応。

### 4.4 分析
- 単一ファイル: SQL 実行、結果テーブル、統計サマリー、Plotly/Chart.js チャート、関係グラフ (react-force-graph)。
- 複数ファイル: 選択ファイルをキュー化し、UNION/INTERSECTION/JOIN（inner/left/right/full）を設定。統合結果は `combined` テーブルとして SQL/Notebook/チャート/関係グラフで利用。
- Notebook: `.sqlnb.json` 形式で保存/読み込み。セル内容・結果・チャート設定を含む。
- チャート: 棒/積み上げ/折れ線/円/散布/バブル/回帰/ヒストグラム/ガント。軸・系列・集計方法（sum, avg, count, min, max）を UI から設定。Plotly/Chart.js を選択可能。
- 関係グラフ: JSON ライクなデータやクエリ結果からノード/エッジを推定し Force Graph で可視化。ツールチップ、ズーム、ドラッグをサポート。Cypher 入力欄はプレースホルダー。

### 4.5 検索・Git
- 検索パネル: 正規表現、大文字小文字、単語一致、include/exclude パターン。ヒット単位/全件置換。
- Git パネル: ステージング、コミットメッセージ、履歴、差分表示。クローンモーダルでリポジトリ URL + 保存フォルダを指定。

### 4.6 エクスポート
- Markdown → Word (.docx)、Mermaid → SVG/PNG/クリップボード。
- データ → CSV/TSV/JSON/YAML/Excel/Parquet(テキスト)。文字コードは UTF-8 / Shift_JIS。
- チャート → PNG/SVG（Plotly 由来）。

## 5. Electron 版
- `package.json` の `main` は `electron/main.js`。`npm run dev:web` と `npm run dev:electron` を併用。
- `electron-builder` 設定: `appId = studio.dataloom`, `productName = DataLoom Studio`, `asar = true`。
- `npm run dist`, `dist:win`, `dist:mac` で配布パッケージを生成。
- セキュリティ: `contextIsolation`, `sandbox` を有効化。レンダラーでは基本的にブラウザ版と同じ API を利用。

## 6. テストと品質
- 単体テスト: Vitest + React Testing Library を想定（`npm run test`）。File System Access API や Plotly などはスタブ化。
- Lint: ESLint (`npm run lint`)。TypeScript/ESLint のビルドエラーは `next.config.ts` で無視設定だが、CI では `npm run build` を通して検知。
- 将来的な Playwright による E2E テストの導入を想定。

## 7. 制限事項
- File System Access API 非対応ブラウザ（Firefox/Safari）ではローカルファイル機能が利用不可。
- Parquet はテキスト変換ベースの簡易サポート。バイナリ解析は未実装。
- Cypher 入力欄は UI プレースホルダー。
- PDF プレビューは 1 ページ目のみ描画。

## 8. リソース
- [README.md](./README.md)
- [docs/README.md](./docs/README.md)
- [docs/mygpt-knowledge.md](./docs/mygpt-knowledge.md)
- [docs/features/README.md](./docs/features/README.md)
- [docs/data-analysis.md](./docs/data-analysis.md)
- [docs/api-reference.md](./docs/api-reference.md)
- [docs/development-guide.md](./docs/development-guide.md)
- [docs/testing/README.md](./docs/testing/README.md)
- [docs/sequence-diagrams/](./docs/sequence-diagrams/)

この仕様書は LLM が DataLoom Studio の構造と機能を把握しやすいように整理されています。各セクションの詳細やコード例は該当ファイルを参照してください。
