/**
 * Mermaid図式をパースする
 * @param content Mermaidの文字列データ
 */
export const parseMermaid = (content: string) => {
  try {
    // Mermaidはテキスト形式なので、基本的なバリデーションのみ行う
    const lines = content.trim().split('\n');
    
    // 空のファイルかチェック
    if (lines.length === 0 || (lines.length === 1 && lines[0].trim() === '')) {
      return { 
        data: { diagram: content, type: 'unknown', valid: false },
        error: '空のMermaidファイルです', 
        valid: false 
      };
    }
    
    // 一般的なMermaid図式タイプを検出
    const firstLine = lines[0].trim().toLowerCase();
    let diagramType = 'unknown';
    
    if (firstLine.startsWith('graph ') || firstLine.startsWith('flowchart ')) {
      diagramType = 'flowchart';
    } else if (firstLine.startsWith('sequencediagram')) {
      diagramType = 'sequence';
    } else if (firstLine.startsWith('classdiagram')) {
      diagramType = 'class';
    } else if (firstLine.startsWith('statediagram')) {
      diagramType = 'state';
    } else if (firstLine.startsWith('erdiagram')) {
      diagramType = 'er';
    } else if (firstLine.startsWith('gantt')) {
      diagramType = 'gantt';
    } else if (firstLine.startsWith('pie')) {
      diagramType = 'pie';
    }
    
    // メタデータを収集
    const metadata = {
      lines: lines.length,
      type: diagramType,
      preview: lines.slice(0, Math.min(5, lines.length)).join('\n') + (lines.length > 5 ? '...' : '')
    };
    
    return { 
      data: { 
        diagram: content, 
        type: diagramType,
        metadata,
        valid: true 
      }, 
      error: null,
      valid: true
    };
  } catch (error) {
    console.error('Error parsing Mermaid file:', error);
    return { 
      data: { diagram: content, type: 'unknown', valid: false },
      error: error instanceof Error ? error.message : 'Mermaid図式の解析に失敗しました',
      valid: false 
    };
  }
};
